@model Ahora.WebApp.Models.Pbl.MemuModel
@using FM.Portal.Core.Common;
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarAhora" aria-controls="navbarAhora" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarAhora">
        <a class="navbar-brand" href="@Url.RouteUrl("Home")">@Helper.SiteName</a>
        <ul class="navbar-nav mr-auto mt-2 mt-lg-0">
            @RenderMenu(Model.AvailableMenu)
        </ul>
    </div>
    @if (Model.User != null)
    {
        <div class="pull-right mr-5">
            <ul class="navbar-nav mr-auto mt-2 mt-lg-0">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        خوش آمدید
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                        @if (!Model.IsAdmin)
                        {
                            <a class="dropdown-item" href="@Url.RouteUrl("User_Home")">
                                <i class="fa fa-arrow-right"></i> ورود به پنل
                            </a>
                            <div class="dropdown-divider"></div>
                            <a href="@Url.RouteUrl("Logout")" class="dropdown-item" style="cursor:pointer">
                                <i class="fa fa-sign-out"></i> خروج
                            </a>
                        }
                        else
                        {
                            <a class="dropdown-item" href="/admin#">
                                <i class="fa fa-arrow-right"></i> ورود به پنل
                            </a>
                        }
                    </div>
                </li>
            </ul>
        </div>
    }
</nav>

@helper RenderMenu(List<MenuItem> model)
{
    foreach (var item in model)
    {
        if (item.Children != null && item.Children.Count > 0)
        {
            if (item.ForeignLink == EnableMenuType.غیرفعال)
            {
                var parameters = routeParams(item.Parameters);
                <li class='nav-item dropdown'>
                    <a class='nav-link dropdown-toggle' href='@Url.RouteUrl(item.Url,parameters)' id='@item.ID' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'><i class='@item.IconText mr-1'></i>@item.Name</a>
                    @ChildRender(item.Children, item.ID)
                </li>
            }
            else
            {
                <li class='nav-item dropdown'>
                    <a class='nav-link dropdown-toggle' href='@Url.RouteUrl(item.Url)' id='@item.ID' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'><i class='@item.IconText mr-1'></i>@item.Name</a>
                    @ChildRender(item.Children, item.ID)
                </li>
            }
        }
        else
        {
            if (Model.User != null)
            {
                if (item.Url.ToLower() != "login")
                {
                    if (item.ForeignLink == EnableMenuType.غیرفعال)
                    {
                        var parameters = routeParams(item.Parameters);
                        <li class='nav-item'>
                            <a class='nav-link' href='@Url.RouteUrl(item.Url,parameters)' id='@item.ID'><i class='@item.IconText mr-1'></i>@item.Name</a>
                        </li>
                    }
                    else
                    {
                        <li class='nav-item dropdown'>
                            <a class='nav-link' href='@Url.RouteUrl(item.Url)' id='@item.ID'><i class='@item.IconText mr-1'></i>@item.Name</a>
                            @ChildRender(item.Children, item.ID)
                        </li>
                    }
                }
            }
            else
            {
                if (item.Url.ToLower() == "login")
                {
                    <li class="nav-item">
                        <a class='nav-link' href='@Url.RouteUrl(item.Url)' id='@item.ID'><i class='@item.IconText mr-1'></i>@item.Name</a>
                    </li>
                }
                else
                {
                    if (item.ForeignLink == EnableMenuType.غیرفعال)
                    {
                        var parameters = routeParams(item.Parameters);
                        <li class='nav-item'>
                            <a class='nav-link' href='@Url.RouteUrl(item.Url,parameters)' id='@item.ID'><i class='@item.IconText mr-1'></i>@item.Name</a>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class='nav-link' href='@Url.RouteUrl(item.Url)' id='@item.ID'><i class='@item.IconText mr-1'></i>@item.Name</a>
                        </li>
                    }
                }
            }

        }
    }
}
@helper ChildRender(List<MenuItem> child, Guid parent)
{
    if (child != null)
    {
        <ul class='dropdown-menu' aria-labelledby='@parent'>
            @if (child.Count > 0)
            {
                foreach (var item in child)
                {
                    if (item.Children != null && item.Children.Count > 0)
                    {
                        if (item.ForeignLink == EnableMenuType.غیرفعال)
                        {
                            var parameters = routeParams(item.Parameters);
                            <li class='nav-item dropdown'>
                                <a class='nav-link dropdown-toggle' href='@Url.RouteUrl(item.Url,parameters)' id='@item.ID' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'><i class='@item.IconText mr-1'></i>@item.Name</a>
                                @ChildRender(item.Children, item.ID)
                            </li>
                        }
                        else
                        {
                            <li class='nav-item dropdown'>
                                <a class='nav-link dropdown-toggle' href='@Url.RouteUrl(item.Url)' id='@item.ID' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'><i class='@item.IconText mr-1'></i>@item.Name</a>
                                @ChildRender(item.Children, item.ID)
                            </li>
                        }
                    }
                    else
                    {
                        if (item.ForeignLink == EnableMenuType.غیرفعال)
                        {
                            var parameters = routeParams(item.Parameters);
                            <li class='nav-item dropdown'>
                                <a class='nav-link dropdown-toggle' href='@Url.RouteUrl(item.Url,parameters)' id='@item.ID' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'><i class='@item.IconText mr-1'></i>@item.Name</a>
                                @ChildRender(item.Children, item.ID)
                            </li>
                        }
                        else
                        {
                            <li class='nav-item dropdown'>
                                <a class='nav-link dropdown-toggle' href='@Url.RouteUrl(item.Url)' id='@item.ID' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'><i class='@item.IconText mr-1'></i>@item.Name</a>
                                @ChildRender(item.Children, item.ID)
                            </li>
                        }
                    }
                }
            }
        </ul>
    }
}
@functions{
    private RouteValueDictionary routeParams(string parameters)
    {
        if (!string.IsNullOrEmpty(parameters))
        {
            var dictionary = new RouteValueDictionary();

            var parameter = parameters.Split(',');
            for (int i = 0; i < parameter.Length; i++)
            {
                var param = parameter[i].Split('=');
                dictionary.Add(param[0].Trim(), FM.Portal.Core.Extention.ReadingTime.CalculateWordsCount.CleanSeoUrl(param[1].Trim()));
            }
            var routeDictionary = new RouteValueDictionary(dictionary);
            return routeDictionary;
        }
        else
            return null;
    }
}
